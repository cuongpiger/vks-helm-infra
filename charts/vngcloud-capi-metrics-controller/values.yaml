# Default values for cluster-api-state-metrics.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  # repository TBD
  repository: vcr.vngcloud.vn/60108-cuongdm3/vngcloud-capi-metrics-controller
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v1.0.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Configuration for the cluster-api-state-metrics service
config:
  # If true, adds the file directory to the header of the log messages
  addDirHeader: false
  # Log to standard error as well as files
  alsoLogtoStderr: false
  # Gzip responses when requested by clients via 'Accept-Encoding: gzip' header.
  enableGzipEncoding: false
  # when logging hits line file:N (eg: main.go:50), emit a stack trace
  logBacktraceAt: ""
  # If non-empty, write log files in this directory
  logDir: ""
  # If non-empty, use this log file
  logFile: ""
  # Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)
  logFileMaxSize: 1800
  # number for the log level verbosity
  logLevel: 1  
  # log to standard error instead of files (default true)
  logToStderr: true
  # Comma-separated list of metrics to be exposed. This list comprises of exact metric names and/or regex patterns. The allowlist and denylist are mutually exclusive.
  metricAllowlist: ""
  # Comma-separated list of Kubernetes annotations keys that will be used in the resource' labels metric. By default the metric contains only name and namespace labels. To include additional annotations provide a list of resource names in their plural form and Kubernetes annotation keys you would like to allow for them (Example: '=namespaces=[kubernetes.io/team,...],pods=[kubernetes.io/team],...)'. A single '*' can be provided per resource instead to allow any annotations, but that has severe performance implications (Example: '=pods=[*]').
  metricAnnotationsAllowlist: ""
  # Comma-separated list of metrics not to be enabled. This list comprises of exact metric names and/or regex patterns. The allowlist and denylist are mutually exclusive.
  metricDenylist: ""
  # Comma-separated list of additional Kubernetes label keys that will be used in the resource' labels metric. By default the metric contains only name and namespace labels. To include additional labels provide a list of resource names in their plural form and Kubernetes label keys you would like to allow for them (Example: '=namespaces=[k8s-label-1,k8s-label-n,...],pods=[app],...)'. A single '*' can be provided per resource instead to allow any labels, but that has severe performance implications (Example: '=pods=[*]').
  metricLabelsAllowlist: ""
  # Comma-separated list of namespaces to be enabled. Defaults to "" which means all
  namespaces: ""
  # Comma-separated list of namespaces not to be enabled. If namespaces and namespaces-denylist are both set, only namespaces that are excluded in namespaces-denylist will be used.
  namespacesDenylist: ""
  # If true, only write logs to their native severity level (vs also writing to each lower severity level)
  oneOutput: false
  # Port to expose metrics on. (default 8080)
  port: 8080
  # Comma-separated list of Resources to be enabled. Defaults to "clusters,machinedeployments,machines,machinesets"
  resources: "clusters,machinedeployments,machines,machinesets"
  # If true, avoid header prefixes in the log messages
  skipHeaders: false
  # If true, avoid headers when opening log files
  skipLogHeaders: false
  # logs at or above this threshold go to stderr (default 2)
  stderrThreshold: 2
  # Port to expose kube-state-metrics self metrics on. (default 8081)
  telemetryPort: 8081
  # Sets resourceVersion=0 for ListWatch requests, using cached resources from the apiserver instead of an etcd quorum read.
  useApiserverCache: false

# ServiceMonitor for the prometheus operator
prometheusServiceMonitor:
  # If true, create a ServiceMonitor
  create: false
  # Set the labels here if using serviceMonitorSelector
  # See https://prometheus-operator.dev/docs/operator/api/#prometheusspec
  serviceMonitorSelectorLabels: {}  
  # label1: "value1"
  # label2: "value2"

  capiMetrics:
    # Relabeling config used for the CAPI metrics
    # See https://prometheus-operator.dev/docs/operator/api/#relabelconfig
    relabelings: {}
    metricRelabelings: {}
    # For example, if you want to copy the value of the label "cluster" into "capi_cluster" uncomment the lines below
    # - sourceLabels:
    #   - cluster
    #   targetLabel: capi_cluster    
  
  exporterMetrics:
    # Relabeling config used for the CAPI exporter self-metrics
    # See https://prometheus-operator.dev/docs/operator/api/#relabelconfig
    relabelings: {}
    metricRelabelings: {}

grafanaDashboards:
  create: false

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

terminationGracePeriodSeconds: 10

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080
  telemetryPort: 8081

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: capi-metrics.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
